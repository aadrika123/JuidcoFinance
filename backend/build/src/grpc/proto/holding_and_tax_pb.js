// source: holding_and_tax.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.holding_and_tax.AccountingEntry', null, global);
goog.exportSymbol('proto.holding_and_tax.DemandsOnExistingAssessments', null, global);
goog.exportSymbol('proto.holding_and_tax.GeneralResponse', null, global);
goog.exportSymbol('proto.holding_and_tax.PropertyDetails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.holding_and_tax.GeneralResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.holding_and_tax.GeneralResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.holding_and_tax.GeneralResponse.displayName = 'proto.holding_and_tax.GeneralResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.holding_and_tax.AccountingEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.holding_and_tax.AccountingEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.holding_and_tax.AccountingEntry.displayName = 'proto.holding_and_tax.AccountingEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.holding_and_tax.PropertyDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.holding_and_tax.PropertyDetails.repeatedFields_, null);
};
goog.inherits(proto.holding_and_tax.PropertyDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.holding_and_tax.PropertyDetails.displayName = 'proto.holding_and_tax.PropertyDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.holding_and_tax.DemandsOnExistingAssessments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.holding_and_tax.DemandsOnExistingAssessments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.holding_and_tax.DemandsOnExistingAssessments.displayName = 'proto.holding_and_tax.DemandsOnExistingAssessments';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.holding_and_tax.GeneralResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.holding_and_tax.GeneralResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.holding_and_tax.GeneralResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.GeneralResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.holding_and_tax.GeneralResponse}
 */
proto.holding_and_tax.GeneralResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.holding_and_tax.GeneralResponse;
  return proto.holding_and_tax.GeneralResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.holding_and_tax.GeneralResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.holding_and_tax.GeneralResponse}
 */
proto.holding_and_tax.GeneralResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.holding_and_tax.GeneralResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.holding_and_tax.GeneralResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.holding_and_tax.GeneralResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.GeneralResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.holding_and_tax.GeneralResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.holding_and_tax.GeneralResponse} returns this
 */
proto.holding_and_tax.GeneralResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.holding_and_tax.GeneralResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.GeneralResponse} returns this
 */
proto.holding_and_tax.GeneralResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.holding_and_tax.AccountingEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.holding_and_tax.AccountingEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.holding_and_tax.AccountingEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.AccountingEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    debitAmount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    creditAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.holding_and_tax.AccountingEntry}
 */
proto.holding_and_tax.AccountingEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.holding_and_tax.AccountingEntry;
  return proto.holding_and_tax.AccountingEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.holding_and_tax.AccountingEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.holding_and_tax.AccountingEntry}
 */
proto.holding_and_tax.AccountingEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDebitAmount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreditAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.holding_and_tax.AccountingEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.holding_and_tax.AccountingEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.holding_and_tax.AccountingEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.AccountingEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDebitAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCreditAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.holding_and_tax.AccountingEntry.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.AccountingEntry} returns this
 */
proto.holding_and_tax.AccountingEntry.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 debit_amount = 2;
 * @return {number}
 */
proto.holding_and_tax.AccountingEntry.prototype.getDebitAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.holding_and_tax.AccountingEntry} returns this
 */
proto.holding_and_tax.AccountingEntry.prototype.setDebitAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 credit_amount = 3;
 * @return {number}
 */
proto.holding_and_tax.AccountingEntry.prototype.getCreditAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.holding_and_tax.AccountingEntry} returns this
 */
proto.holding_and_tax.AccountingEntry.prototype.setCreditAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.holding_and_tax.PropertyDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.holding_and_tax.PropertyDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.holding_and_tax.PropertyDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.holding_and_tax.PropertyDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.PropertyDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    assessmentCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountingEntriesList: jspb.Message.toObjectList(msg.getAccountingEntriesList(),
    proto.holding_and_tax.AccountingEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.holding_and_tax.PropertyDetails}
 */
proto.holding_and_tax.PropertyDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.holding_and_tax.PropertyDetails;
  return proto.holding_and_tax.PropertyDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.holding_and_tax.PropertyDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.holding_and_tax.PropertyDetails}
 */
proto.holding_and_tax.PropertyDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssessmentCode(value);
      break;
    case 2:
      var value = new proto.holding_and_tax.AccountingEntry;
      reader.readMessage(value,proto.holding_and_tax.AccountingEntry.deserializeBinaryFromReader);
      msg.addAccountingEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.holding_and_tax.PropertyDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.holding_and_tax.PropertyDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.holding_and_tax.PropertyDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.PropertyDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssessmentCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountingEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.holding_and_tax.AccountingEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string assessment_code = 1;
 * @return {string}
 */
proto.holding_and_tax.PropertyDetails.prototype.getAssessmentCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.PropertyDetails} returns this
 */
proto.holding_and_tax.PropertyDetails.prototype.setAssessmentCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AccountingEntry accounting_entries = 2;
 * @return {!Array<!proto.holding_and_tax.AccountingEntry>}
 */
proto.holding_and_tax.PropertyDetails.prototype.getAccountingEntriesList = function() {
  return /** @type{!Array<!proto.holding_and_tax.AccountingEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.holding_and_tax.AccountingEntry, 2));
};


/**
 * @param {!Array<!proto.holding_and_tax.AccountingEntry>} value
 * @return {!proto.holding_and_tax.PropertyDetails} returns this
*/
proto.holding_and_tax.PropertyDetails.prototype.setAccountingEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.holding_and_tax.AccountingEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.holding_and_tax.AccountingEntry}
 */
proto.holding_and_tax.PropertyDetails.prototype.addAccountingEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.holding_and_tax.AccountingEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.holding_and_tax.PropertyDetails} returns this
 */
proto.holding_and_tax.PropertyDetails.prototype.clearAccountingEntriesList = function() {
  return this.setAccountingEntriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.toObject = function(opt_includeInstance) {
  return proto.holding_and_tax.DemandsOnExistingAssessments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.holding_and_tax.DemandsOnExistingAssessments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.DemandsOnExistingAssessments.toObject = function(includeInstance, msg) {
  var f, obj = {
    ulb: jspb.Message.getFieldWithDefault(msg, 1, ""),
    billNo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dateBillRaised: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oldWardNo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    newWardNo: jspb.Message.getFieldWithDefault(msg, 5, ""),
    departmentOrSection: jspb.Message.getFieldWithDefault(msg, 6, ""),
    propertyDetails: (f = msg.getPropertyDetails()) && proto.holding_and_tax.PropertyDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.holding_and_tax.DemandsOnExistingAssessments;
  return proto.holding_and_tax.DemandsOnExistingAssessments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.holding_and_tax.DemandsOnExistingAssessments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUlb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateBillRaised(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldWardNo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewWardNo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartmentOrSection(value);
      break;
    case 7:
      var value = new proto.holding_and_tax.PropertyDetails;
      reader.readMessage(value,proto.holding_and_tax.PropertyDetails.deserializeBinaryFromReader);
      msg.setPropertyDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.holding_and_tax.DemandsOnExistingAssessments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.holding_and_tax.DemandsOnExistingAssessments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.holding_and_tax.DemandsOnExistingAssessments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUlb();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBillNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDateBillRaised();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOldWardNo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNewWardNo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDepartmentOrSection();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPropertyDetails();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.holding_and_tax.PropertyDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ulb = 1;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getUlb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setUlb = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bill_no = 2;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getBillNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setBillNo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string date_bill_raised = 3;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getDateBillRaised = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setDateBillRaised = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string old_ward_no = 4;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getOldWardNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setOldWardNo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string new_ward_no = 5;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getNewWardNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setNewWardNo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string department_or_section = 6;
 * @return {string}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getDepartmentOrSection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setDepartmentOrSection = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional PropertyDetails property_details = 7;
 * @return {?proto.holding_and_tax.PropertyDetails}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.getPropertyDetails = function() {
  return /** @type{?proto.holding_and_tax.PropertyDetails} */ (
    jspb.Message.getWrapperField(this, proto.holding_and_tax.PropertyDetails, 7));
};


/**
 * @param {?proto.holding_and_tax.PropertyDetails|undefined} value
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
*/
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.setPropertyDetails = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.holding_and_tax.DemandsOnExistingAssessments} returns this
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.clearPropertyDetails = function() {
  return this.setPropertyDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.holding_and_tax.DemandsOnExistingAssessments.prototype.hasPropertyDetails = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.holding_and_tax);
