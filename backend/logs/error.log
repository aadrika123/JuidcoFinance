{"level":"error","message":"\nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42P01`. Message: `relation \"bank_masters_history\" does not exist`","metaData":{"action":"POST","apiId":"0404","version":"1.0"},"service":"user-service","timestamp":"2024-04-01T12:15:20.361Z"}
{"level":"error","message":"Cannot read properties of undefined (reading 'vendor_type_id')","metaData":{"action":"POST","apiId":"0701","version":"1.0"},"service":"user-service","timestamp":"2024-04-01T13:01:21.383Z"}
{"level":"error","message":"\"email\" must be a valid email","metaData":{"action":"POST","apiId":"0701","version":"1.0"},"service":"user-service","timestamp":"2024-04-01T13:10:12.660Z"}
{"level":"error","message":"\nInvalid `prisma.receipt_entries.createMany()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/component/juidcoFinance/dao/transactions/receiptEntryDao.ts:21:41\n\n  18 \n  19 // store payment entry details in DB\n  20 store = async (req: Request) => {\n→ 21   return await prisma.receipt_entries.createMany(\nUnique constraint failed on the fields: (`id`)","metaData":{"action":"POST","apiId":"2501","version":"1.0"},"service":"user-service","timestamp":"2024-04-01T13:25:14.238Z"}
{"level":"error","message":"\nInvalid `prisma.receipt_entries.createMany()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/component/juidcoFinance/dao/transactions/receiptEntryDao.ts:21:41\n\n  18 \n  19 // store payment entry details in DB\n  20 store = async (req: Request) => {\n→ 21   return await prisma.receipt_entries.createMany(\nUnique constraint failed on the fields: (`id`)","metaData":{"action":"POST","apiId":"2501","version":"1.0"},"service":"user-service","timestamp":"2024-04-01T13:29:09.335Z"}
{"level":"error","message":"Cannot read properties of undefined (reading 'bank_id')","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T07:56:55.918Z"}
{"level":"error","message":"\"ulb_id\" is required","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T07:57:18.494Z"}
{"level":"error","message":"\"ulb_id\" is required","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:03:47.234Z"}
{"level":"error","message":"\"ulb_id\" is required","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:04:15.326Z"}
{"level":"error","message":"go to hell","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:06:33.461Z"}
{"level":"error","message":"go to hell","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:06:51.996Z"}
{"level":"error","message":"ulb_id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:07:16.327Z"}
{"level":"error","message":"\nInvalid `prisma.bank_masters.findFirst()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/apis/dao/masters/bankMasterDao.ts:113:44\n\n  110     }\n  111   },\n  112 };\n→ 113 const data = await prisma.bank_masters.findFirst({\n        where: {\n      +   id: {\n      +     equals: Int | IntFieldRefInput,\n      +     in: Int[] | ListIntFieldRefInput,\n      +     notIn: Int[] | ListIntFieldRefInput,\n      +     lt: Int | IntFieldRefInput,\n      +     lte: Int | IntFieldRefInput,\n      +     gt: Int | IntFieldRefInput,\n      +     gte: Int | IntFieldRefInput,\n      +     not: Int | NestedIntFilter\n      +   }\n        },\n        select: {\n          id: true,\n          bank: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          ifsc_code: true,\n          branch: true,\n          micr_code: true,\n          branch_address: true,\n          branch_city: true,\n          branch_state: true,\n          branch_district: true,\n          email: true,\n          contact_no: true,\n          ulb: {\n            select: {\n              id: true,\n              ulbs: true\n            }\n          },\n          bank_type: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        }\n      })\n\nArgument `id` is missing.","metaData":{"action":"GET","apiId":"0403","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:08:58.061Z"}
{"level":"error","message":"\nInvalid `prisma.bank_masters.findFirst()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/apis/dao/masters/bankMasterDao.ts:113:44\n\n  110     }\n  111   },\n  112 };\n→ 113 const data = await prisma.bank_masters.findFirst({\n        where: {\n      +   id: {\n      +     equals: Int | IntFieldRefInput,\n      +     in: Int[] | ListIntFieldRefInput,\n      +     notIn: Int[] | ListIntFieldRefInput,\n      +     lt: Int | IntFieldRefInput,\n      +     lte: Int | IntFieldRefInput,\n      +     gt: Int | IntFieldRefInput,\n      +     gte: Int | IntFieldRefInput,\n      +     not: Int | NestedIntFilter\n      +   }\n        },\n        select: {\n          id: true,\n          bank: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          ifsc_code: true,\n          branch: true,\n          micr_code: true,\n          branch_address: true,\n          branch_city: true,\n          branch_state: true,\n          branch_district: true,\n          email: true,\n          contact_no: true,\n          ulb: {\n            select: {\n              id: true,\n              ulbs: true\n            }\n          },\n          bank_type: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        }\n      })\n\nArgument `id` is missing.","metaData":{"action":"GET","apiId":"0403","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:09:00.210Z"}
{"level":"error","message":"\nInvalid `prisma.bank_masters.findFirst()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/apis/dao/masters/bankMasterDao.ts:113:44\n\n  110     }\n  111   },\n  112 };\n→ 113 const data = await prisma.bank_masters.findFirst({\n        where: {\n      +   id: {\n      +     equals: Int | IntFieldRefInput,\n      +     in: Int[] | ListIntFieldRefInput,\n      +     notIn: Int[] | ListIntFieldRefInput,\n      +     lt: Int | IntFieldRefInput,\n      +     lte: Int | IntFieldRefInput,\n      +     gt: Int | IntFieldRefInput,\n      +     gte: Int | IntFieldRefInput,\n      +     not: Int | NestedIntFilter\n      +   }\n        },\n        select: {\n          id: true,\n          bank: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          ifsc_code: true,\n          branch: true,\n          micr_code: true,\n          branch_address: true,\n          branch_city: true,\n          branch_state: true,\n          branch_district: true,\n          email: true,\n          contact_no: true,\n          ulb: {\n            select: {\n              id: true,\n              ulbs: true\n            }\n          },\n          bank_type: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        }\n      })\n\nArgument `id` is missing.","metaData":{"action":"GET","apiId":"0403","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:09:03.376Z"}
{"level":"error","message":"\nInvalid `prisma.bank_masters.findFirst()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/apis/dao/masters/bankMasterDao.ts:113:44\n\n  110     }\n  111   },\n  112 };\n→ 113 const data = await prisma.bank_masters.findFirst({\n        where: {\n      +   id: {\n      +     equals: Int | IntFieldRefInput,\n      +     in: Int[] | ListIntFieldRefInput,\n      +     notIn: Int[] | ListIntFieldRefInput,\n      +     lt: Int | IntFieldRefInput,\n      +     lte: Int | IntFieldRefInput,\n      +     gt: Int | IntFieldRefInput,\n      +     gte: Int | IntFieldRefInput,\n      +     not: Int | NestedIntFilter\n      +   }\n        },\n        select: {\n          id: true,\n          bank: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          ifsc_code: true,\n          branch: true,\n          micr_code: true,\n          branch_address: true,\n          branch_city: true,\n          branch_state: true,\n          branch_district: true,\n          email: true,\n          contact_no: true,\n          ulb: {\n            select: {\n              id: true,\n              ulbs: true\n            }\n          },\n          bank_type: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        }\n      })\n\nArgument `id` is missing.","metaData":{"action":"GET","apiId":"0403","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:09:08.500Z"}
{"level":"error","message":"\nInvalid `prisma.bank_masters.findFirst()` invocation in\n/home/viizz29/v/projects/aadrika/JuidcoFinance/backend/src/apis/dao/masters/bankMasterDao.ts:113:44\n\n  110     }\n  111   },\n  112 };\n→ 113 const data = await prisma.bank_masters.findFirst({\n        where: {\n      +   id: {\n      +     equals: Int | IntFieldRefInput,\n      +     in: Int[] | ListIntFieldRefInput,\n      +     notIn: Int[] | ListIntFieldRefInput,\n      +     lt: Int | IntFieldRefInput,\n      +     lte: Int | IntFieldRefInput,\n      +     gt: Int | IntFieldRefInput,\n      +     gte: Int | IntFieldRefInput,\n      +     not: Int | NestedIntFilter\n      +   }\n        },\n        select: {\n          id: true,\n          bank: {\n            select: {\n              id: true,\n              name: true\n            }\n          },\n          ifsc_code: true,\n          branch: true,\n          micr_code: true,\n          branch_address: true,\n          branch_city: true,\n          branch_state: true,\n          branch_district: true,\n          email: true,\n          contact_no: true,\n          ulb: {\n            select: {\n              id: true,\n              ulbs: true\n            }\n          },\n          bank_type: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        }\n      })\n\nArgument `id` is missing.","metaData":{"action":"GET","apiId":"0403","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:09:31.586Z"}
{"level":"error","message":"ulb_id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:10:16.200Z"}
{"level":"error","message":"ulb_id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:10:38.954Z"}
{"level":"error","message":"ulb_id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:12:17.011Z"}
{"level":"error","message":"ulb_id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:13:00.452Z"}
{"level":"error","message":"id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:13:49.719Z"}
{"level":"error","message":"id is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:14:02.936Z"}
{"level":"error","message":"branch is a required field","metaData":{"action":"POST","apiId":"0401","version":"1.0"},"service":"user-service","timestamp":"2024-04-03T08:18:04.908Z"}
